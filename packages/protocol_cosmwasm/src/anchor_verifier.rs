pub use self::anchor_verifier::AnchorVerifier;

#[allow(clippy::all)]
pub mod anchor_verifier {
    use crate::verifier::verifier::ArkworksVerifierBn254;
    use serde::{Deserialize, Serialize};

    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct AnchorVerifier {
        vk_bytes: Vec<u8>,
    }

    #[derive(Debug)]
    pub enum Error {
        /// Returned if error verifying
        VerifierError,
    }

    /// The verifier result type.
    pub type Result<T> = core::result::Result<T, Error>;

    impl AnchorVerifier {
        pub fn new() -> Self {
            let mut vk_bytes: Vec<u8> = Vec::new();
            vk_bytes.extend_from_slice(&[
                81, 238, 136, 159, 29, 13, 245, 147, 43, 68, 103, 205, 48, 186, 241, 182, 213, 181, 152, 127,
                49, 155, 22, 2, 153, 33, 240, 142, 135, 47, 18, 13, 213, 163, 191, 216, 178, 147, 231, 126, 
                215, 32, 163, 219, 203, 4, 95, 137, 195, 46, 119, 177, 111, 22, 56, 68, 238, 136, 58, 38, 167, 
                253, 114, 19, 52, 65, 192, 108, 32, 32, 38, 214, 153, 56, 8, 23, 31, 233, 210, 124, 107, 20, 
                113, 75, 171, 55, 2, 159, 135, 253, 7, 51, 55, 168, 36, 158, 237, 52, 62, 61, 79, 51, 119, 
                179, 147, 173, 110, 90, 9, 234, 228, 175, 22, 22, 1, 38, 110, 78, 212, 54, 13, 239, 11, 39, 
                75, 104, 69, 23, 95, 40, 168, 167, 103, 130, 180, 27, 72, 96, 151, 123, 22, 17, 102, 33, 151, 
                161, 229, 124, 207, 70, 188, 237, 174, 39, 22, 88, 60, 248, 74, 135, 6, 48, 37, 143, 241, 7, 
                121, 210, 94, 91, 64, 200, 146, 243, 87, 98, 98, 172, 139, 212, 214, 211, 221, 57, 22, 145, 
                165, 236, 80, 123, 247, 28, 99, 152, 94, 6, 228, 238, 114, 234, 235, 30, 114, 113, 92, 141, 
                205, 25, 27, 157, 97, 233, 166, 143, 111, 130, 116, 7, 26, 23, 136, 77, 167, 23, 10, 0, 0, 
                0, 0, 0, 0, 0, 102, 9, 209, 48, 56, 155, 147, 11, 190, 240, 189, 121, 143, 14, 40, 132, 155, 
                46, 178, 55, 246, 109, 23, 58, 122, 26, 56, 244, 116, 46, 227, 26, 1, 232, 54, 221, 47, 44, 
                117, 80, 83, 211, 121, 209, 224, 40, 48, 232, 62, 244, 49, 142, 77, 243, 249, 246, 227, 23, 
                156, 228, 66, 77, 177, 134, 174, 184, 72, 193, 42, 123, 221, 36, 239, 151, 44, 79, 161, 108, 
                47, 65, 122, 151, 105, 180, 169, 30, 105, 226, 124, 166, 206, 212, 39, 254, 169, 34, 184, 225, 
                170, 218, 172, 124, 57, 145, 182, 22, 60, 80, 253, 150, 0, 200, 169, 214, 122, 228, 179, 91, 
                151, 220, 160, 214, 61, 50, 21, 221, 110, 40, 132, 90, 36, 115, 65, 187, 175, 61, 82, 35, 3, 
                2, 213, 41, 47, 179, 29, 138, 28, 134, 173, 141, 17, 97, 125, 105, 56, 145, 89, 7, 248, 4, 
                101, 59, 206, 44, 72, 51, 85, 249, 118, 162, 70, 128, 121, 255, 245, 93, 126, 9, 219, 67, 
                200, 160, 150, 221, 155, 174, 192, 29, 126, 177, 29, 39, 115, 169, 215, 152, 34, 32, 120, 
                193, 119, 231, 137, 0, 23, 29, 152, 103, 203, 100, 246, 232, 89, 38, 188, 164, 70, 134, 80, 
                174, 56, 136, 55, 11, 90, 163, 72, 69, 58, 124, 138, 177, 120, 2, 81, 97, 237, 117, 49, 200, 
                140, 120, 134, 105, 92, 103, 65, 68, 55, 99, 160, 19, 171, 234, 209, 27, 22, 246, 46, 67, 114, 
                163, 94, 24, 156, 90, 117, 79, 218, 217, 165, 230, 13, 233, 104, 133, 22, 52, 251, 136, 89, 20, 
                56, 240, 21, 157, 86, 6, 104, 218, 65, 113, 203, 69, 247, 108, 197, 29, 20, 93, 108, 70, 231, 
                165, 140, 229, 34, 16, 249, 195, 144, 117, 228, 169, 197, 93, 242, 101, 79, 1
            ]);
            Self {
                vk_bytes: vk_bytes.to_vec(),
            }
        }

        pub fn verify(&self, public_inp_bytes: Vec<u8>, proof_bytes: Vec<u8>) -> Result<bool> {
            ArkworksVerifierBn254::verify(&public_inp_bytes, &proof_bytes, &self.vk_bytes)
                .map_err(|_| Error::VerifierError)
        }
    }

    impl Default for AnchorVerifier {
        fn default() -> Self {
            Self::new()
        }
    }
}
